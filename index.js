// Generated by CoffeeScript 1.8.0
(function() {
  var dateformat, now, url, _;

  _ = require('lodash');

  url = require('url');

  dateformat = require('dateformat');

  now = function() {
    var ret;
    ret = new Date();
    return dateformat(new Date(), 'yyyymmddHHMMss');
  };

  angular.module('util.audio', []).config(function($sceDelegateProvider) {
    return $sceDelegateProvider.resourceUrlWhitelist(['self', 'https://mob.myvnc.com/**', 'filesystem:**', 'blob:**']);
  }).factory('audioService', function() {
    var Recorder, Wad, beep;
    Wad = require('Wad/build/wad.js');
    beep = function(ms, cb) {
      var callback, sine;
      sine = new Wad({
        source: 'sine'
      });
      sine.play();
      callback = function() {
        sine.stop();
        return cb();
      };
      return _.delay(callback, ms);
    };
    Recorder = (function() {
      Recorder.prototype.recording = false;

      function Recorder() {
        this.media = new Wad.Poly({
          recConfig: {
            workerPath: 'lib/Wad/src/Recorderjs/recorderWorker.js'
          }
        });
        this.mic = new Wad({
          source: 'mic'
        });
        this.media.add(this.mic);
      }

      Recorder.prototype.start = function() {
        return beep(1000, (function(_this) {
          return function() {
            _this.recording = true;
            _this.media.rec.clear();
            _this.media.output.disconnect(_this.media.destination);
            _this.media.rec.record();
            return _this.mic.play();
          };
        })(this));
      };

      Recorder.prototype.stop = function() {
        return new Promise((function(_this) {
          return function(fulfill, reject) {
            return beep(500, function() {
              _this.mic.stop();
              _this.media.rec.stop();
              _this.media.output.connect(_this.media.destination);
              _this.recording = false;
              return _this.file().then(function(file) {
                _this.url = URL.createObjectURL(file);
                return fulfill(_this);
              });
            });
          };
        })(this));
      };

      Recorder.prototype.file = function(name) {
        if (name == null) {
          name = "" + (now()) + ".wav";
        }
        return new Promise((function(_this) {
          return function(fulfill, reject) {
            return _this.media.rec.exportWAV(function(blob) {
              _.extend(blob, {
                name: name,
                lastModifiedDate: new Date()
              });
              return fulfill(blob);
            });
          };
        })(this));
      };

      return Recorder;

    })();
    return {
      recorder: new Recorder()
    };
  });

}).call(this);
